/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Beans/Customizer.java to edit this template
 */
package Visual;

import Programa.Host;
import Programa.InfoInmueble;
import Programa.Direccion;
import Programa.Inmueble;
import Programa.MainBNB;
import Programa.Inicio;
import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class AddInmueble extends javax.swing.JPanel {

    String foto = "";

    /**
     * Constructor para la clase AddInmueble. Inicializa los componentes y oculta los mensajes de error.
     */
    public AddInmueble() {
        initComponents();
        titleError.setVisible(false);
        descriptionError.setVisible(false);
        priceError.setVisible(false);
        guestError.setVisible(false);
        bedroomError.setVisible(false);
        bedError.setVisible(false);
        bathError.setVisible(false);
        serviceError.setVisible(false);
        bathError1.setVisible(false);
    }

    /**
     * Abre un cuadro de diálogo para seleccionar una imagen.
     * @return El archivo de imagen seleccionado o null si no se seleccionó ninguno.
     */
    public File abrirImagen() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccione la imagen:");
        fileChooser.setAcceptAllFileFilterUsed(false); // Desactivar la opción "Todos los archivos"
        fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivos de imagen", "jpg", "jpeg", "png", "gif", "bmp"));

        int result = fileChooser.showOpenDialog(null); // Muestra el diálogo y obtiene la respuesta del usuario

        // Procesa la respuesta del usuario
        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile(); // Devuelve el archivo seleccionado
        }
        return null; // Devuelve null si no se seleccionó ningún archivo o si el usuario canceló
    }

    /**
     * Guarda la imagen seleccionada en el directorio de destino.
     * @param archivofoto El archivo de imagen a guardar.
     * @return La ruta donde se guardó la imagen o null si hubo un error.
     */
    public String guardadoImagen(File archivofoto) {
        String directoriodestino = "./src/main/resources/fotosinmuebles"; // Directorio donde se guardará la imagen
        Path pathdestino = Paths.get(directoriodestino, archivofoto.getName());

        try {
            // Crea el directorio si no existe
            if (!Files.exists(Paths.get(directoriodestino))) {
                Files.createDirectories(Paths.get(directoriodestino));
            }

            // Copia el archivo al directorio de destino
            Files.copy(archivofoto.toPath(), pathdestino, StandardCopyOption.REPLACE_EXISTING);
            System.out.println("Imagen guardada en: " + pathdestino);
            return pathdestino.toString(); // Devuelve la ruta de la imagen guardada
        } catch (IOException ex) {
            System.out.println("Error al guardar la imagen: " + ex.getMessage());
            return null; // Devuelve null en caso de error
        }
    }

    /**
     * Carga una imagen seleccionada por el usuario y la guarda en el directorio especificado.
     */
    public void cargaImagen() {
        File fotoFile = abrirImagen(); // Abre el diálogo para seleccionar la imagen
        if (fotoFile != null) {
            foto = guardadoImagen(fotoFile); // Guarda la imagen seleccionada
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        barraarriba = new javax.swing.JPanel();
        logo = new javax.swing.JButton();
        logoLabel = new javax.swing.JLabel();
        mainscr = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        data = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        photoLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        guestLabel = new javax.swing.JLabel();
        bedroomLabel = new javax.swing.JLabel();
        bedLabel = new javax.swing.JLabel();
        bathLabel = new javax.swing.JLabel();
        servicesLabel = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        titleTextField = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        descriptionTextPanel = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        servicesTextPane = new javax.swing.JTextPane();
        photoButton = new javax.swing.JButton();
        numberLabel = new javax.swing.JLabel();
        streetLabel = new javax.swing.JLabel();
        streetTextField = new javax.swing.JTextField();
        numberTextField = new javax.swing.JTextField();
        cityLabel = new javax.swing.JLabel();
        cpLabel = new javax.swing.JLabel();
        cityTextField = new javax.swing.JTextField();
        cpTextField = new javax.swing.JTextField();
        createBuildingButton = new javax.swing.JButton();
        titleError = new javax.swing.JLabel();
        priceError = new javax.swing.JLabel();
        descriptionError = new javax.swing.JLabel();
        bedroomError = new javax.swing.JLabel();
        guestError = new javax.swing.JLabel();
        bathError = new javax.swing.JLabel();
        bedError = new javax.swing.JLabel();
        serviceError = new javax.swing.JLabel();
        guestSpinner = new javax.swing.JSpinner();
        bedroomSpinner = new javax.swing.JSpinner();
        bedSpinner = new javax.swing.JSpinner();
        bathSpinner = new javax.swing.JSpinner();
        bathError1 = new javax.swing.JLabel();
        priceTextField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(255, 250, 248));

        barraarriba.setBackground(new java.awt.Color(255, 250, 248));
        barraarriba.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        barraarriba.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logo.setBackground(new java.awt.Color(255, 153, 153));
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/airbnb logo - 100x100.png"))); // NOI18N
        logo.setBorderPainted(false);
        logo.setContentAreaFilled(false);
        logo.setDefaultCapable(false);
        logo.setFocusPainted(false);
        logo.setFocusable(false);
        logo.setRequestFocusEnabled(false);
        logo.setRolloverEnabled(false);
        logo.setVerifyInputWhenFocusTarget(false);
        logo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoActionPerformed(evt);
            }
        });
        barraarriba.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(53, 8, 71, 75));

        logoLabel.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        logoLabel.setForeground(new java.awt.Color(255, 90, 95));
        logoLabel.setText("JavaBNB");
        barraarriba.add(logoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 30, -1, -1));

        mainscr.setBackground(new java.awt.Color(255, 90, 95));
        mainscr.setForeground(new java.awt.Color(255, 255, 255));
        mainscr.setText("Volver");
        mainscr.setBorderPainted(false);
        mainscr.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mainscr.setPreferredSize(new java.awt.Dimension(80, 30));
        mainscr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainscrActionPerformed(evt);
            }
        });
        barraarriba.add(mainscr, new org.netbeans.lib.awtextra.AbsoluteConstraints(799, 31, 96, 46));

        jPanel1.setBackground(new java.awt.Color(255, 250, 248));

        jLabel3.setFont(new java.awt.Font("Serif", 0, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 90, 95));
        jLabel3.setText("¡Añade algún inmueble!");

        jLabel1.setFont(new java.awt.Font("Serif", 2, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 90, 95));
        jLabel1.setText("Recuerda introducir todos los datos y no dejar nada vacío");

        data.setBackground(new java.awt.Color(255, 250, 248));
        data.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        data.setMaximumSize(new java.awt.Dimension(1000, 1000));
        data.setPreferredSize(new java.awt.Dimension(600, 520));
        data.setRequestFocusEnabled(false);

        titleLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        titleLabel.setText("Título:");

        typeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeLabel.setText("types:");

        descriptionLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        descriptionLabel.setText("Descripción:");

        photoLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        photoLabel.setText("Fotografía:");

        priceLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceLabel.setText("Precio por noche:");

        guestLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        guestLabel.setText("Máximo de huéspedes:");

        bedroomLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bedroomLabel.setText("Nº de habitaciones:");

        bedLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bedLabel.setText("Nº de camas:");

        bathLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bathLabel.setText("Nº de baños:");

        servicesLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        servicesLabel.setText("Servicios:");

        typeComboBox.setBackground(new java.awt.Color(255, 90, 95));
        typeComboBox.setForeground(new java.awt.Color(255, 255, 255));
        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Casa", "Apartamento" }));

        jScrollPane2.setMinimumSize(new java.awt.Dimension(300, 50));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(300, 50));

        titleTextField.setMinimumSize(new java.awt.Dimension(300, 50));
        titleTextField.setPreferredSize(new java.awt.Dimension(300, 60));
        jScrollPane2.setViewportView(titleTextField);

        jScrollPane3.setMinimumSize(new java.awt.Dimension(300, 50));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(300, 50));

        descriptionTextPanel.setMinimumSize(new java.awt.Dimension(300, 50));
        descriptionTextPanel.setPreferredSize(new java.awt.Dimension(300, 60));
        jScrollPane3.setViewportView(descriptionTextPanel);

        jScrollPane4.setMinimumSize(new java.awt.Dimension(300, 50));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(300, 50));

        servicesTextPane.setMinimumSize(new java.awt.Dimension(300, 50));
        servicesTextPane.setPreferredSize(new java.awt.Dimension(300, 60));
        jScrollPane4.setViewportView(servicesTextPane);

        photoButton.setBackground(new java.awt.Color(255, 90, 95));
        photoButton.setForeground(new java.awt.Color(255, 255, 255));
        photoButton.setText("Añadir fotografía");
        photoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                photoButtonActionPerformed(evt);
            }
        });

        numberLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        numberLabel.setText("Número:");

        streetLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        streetLabel.setText("Calle:");

        streetTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streetTextFieldActionPerformed(evt);
            }
        });

        numberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberTextFieldActionPerformed(evt);
            }
        });

        cityLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cityLabel.setText("Ciudad:");

        cpLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cpLabel.setText("Código Postal:");

        cityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityTextFieldActionPerformed(evt);
            }
        });

        cpTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpTextFieldActionPerformed(evt);
            }
        });

        createBuildingButton.setBackground(new java.awt.Color(255, 90, 95));
        createBuildingButton.setForeground(new java.awt.Color(255, 255, 255));
        createBuildingButton.setText("Crear inmueble");
        createBuildingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBuildingButtonActionPerformed(evt);
            }
        });

        titleError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        titleError.setText("No es válido o está vacío");

        priceError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        priceError.setText("Debe ser mayor a 0");

        descriptionError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        descriptionError.setText("No es válido o está vacío");

        bedroomError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        bedroomError.setText("Debe ser mayor a 0");

        guestError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        guestError.setText("Debe ser mayor a 0");

        bathError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        bathError.setText("Debe ser mayor a 0");

        bedError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        bedError.setText("Debe ser mayor a 0");

        serviceError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        serviceError.setText("No es válido o está vacío");

        guestSpinner.setMinimumSize(new java.awt.Dimension(113, 27));
        guestSpinner.setPreferredSize(new java.awt.Dimension(113, 27));

        bedroomSpinner.setMinimumSize(new java.awt.Dimension(113, 27));
        bedroomSpinner.setPreferredSize(new java.awt.Dimension(113, 27));

        bedSpinner.setMinimumSize(new java.awt.Dimension(113, 27));
        bedSpinner.setPreferredSize(new java.awt.Dimension(113, 27));

        bathSpinner.setMinimumSize(new java.awt.Dimension(113, 27));
        bathSpinner.setPreferredSize(new java.awt.Dimension(113, 27));

        bathError1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        bathError1.setText("Por favor, añada una fotografía");

        priceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dataLayout = new javax.swing.GroupLayout(data);
        data.setLayout(dataLayout);
        dataLayout.setHorizontalGroup(
            dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataLayout.createSequentialGroup()
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bathLabel)
                            .addGroup(dataLayout.createSequentialGroup()
                                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bedLabel)
                                    .addComponent(bedroomLabel)
                                    .addComponent(guestLabel)
                                    .addComponent(priceLabel)
                                    .addComponent(photoLabel)
                                    .addComponent(servicesLabel)
                                    .addComponent(numberLabel))
                                .addGap(26, 26, 26)
                                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dataLayout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(descriptionError))
                                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(dataLayout.createSequentialGroup()
                                        .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(dataLayout.createSequentialGroup()
                                                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(streetTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                                    .addComponent(numberTextField))
                                                .addGap(85, 85, 85)
                                                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cpLabel)
                                                    .addComponent(cityLabel)))
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(dataLayout.createSequentialGroup()
                                                .addGap(41, 41, 41)
                                                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(dataLayout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(titleError, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(dataLayout.createSequentialGroup()
                                            .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(guestSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(bedroomSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(bedSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(bathSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(priceTextField))
                                            .addGap(57, 57, 57)
                                            .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(bedroomError, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(bathError, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(bedError, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(guestError, javax.swing.GroupLayout.Alignment.TRAILING))))
                                    .addGroup(dataLayout.createSequentialGroup()
                                        .addComponent(photoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(dataLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(bathError1))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(priceError)
                                                .addGap(94, 94, 94))))
                                    .addComponent(serviceError)))
                            .addComponent(titleLabel)
                            .addComponent(typeLabel)
                            .addComponent(descriptionLabel)
                            .addComponent(streetLabel)))
                    .addGroup(dataLayout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(createBuildingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        dataLayout.setVerticalGroup(
            dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(titleError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(titleLabel)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataLayout.createSequentialGroup()
                        .addComponent(typeLabel)
                        .addGap(2, 2, 2))
                    .addComponent(typeComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(dataLayout.createSequentialGroup()
                        .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dataLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(descriptionLabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dataLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28)
                        .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(streetLabel)
                            .addComponent(streetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numberLabel)
                            .addComponent(numberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(dataLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descriptionError)
                        .addGap(41, 41, 41)
                        .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityLabel)
                            .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cpLabel)
                            .addComponent(cpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(31, 31, 31)
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceLabel)
                    .addComponent(priceError)
                    .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guestLabel)
                    .addComponent(guestError)
                    .addComponent(guestSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bedroomLabel)
                    .addComponent(bedroomError)
                    .addComponent(bedroomSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bedLabel)
                    .addComponent(bedError)
                    .addComponent(bedSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bathLabel)
                    .addComponent(bathError)
                    .addComponent(bathSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(photoLabel)
                    .addComponent(photoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bathError1))
                .addGap(24, 24, 24)
                .addGroup(dataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(servicesLabel)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(serviceError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(createBuildingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(328, 328, 328)
                .addComponent(jLabel3))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(334, 334, 334)
                .addComponent(jLabel1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(216, 216, 216)
                .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(barraarriba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(barraarriba, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void logoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logoActionPerformed

    private void mainscrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainscrActionPerformed
        // Aplicacion.cardLayout.show(Aplicacion.cards, "Pantalla mainscreenhost");
        Aplicacion.cargaPantallaPrincipal();
    }//GEN-LAST:event_mainscrActionPerformed

    private void photoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photoButtonActionPerformed
        File f = abrirImagen();
        if (f != null) {
            foto = guardadoImagen(f);
        } else {
            System.out.println("Esta ruta no existe");
        }
    }//GEN-LAST:event_photoButtonActionPerformed

    private void streetTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streetTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_streetTextFieldActionPerformed

    private void numberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberTextFieldActionPerformed

    private void cityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityTextFieldActionPerformed

    private void cpTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cpTextFieldActionPerformed

    private void createBuildingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBuildingButtonActionPerformed
        // Obtén el anfitrión actual del sistema
        Host anfitrion = (Host) Inicio.devolverCliente();
        if (anfitrion == null) {
            // Muestra un mensaje de error si el usuario actual no es un anfitrión válido
            JOptionPane.showMessageDialog(this, "Error: el usuario no es un anfitrión válido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Recoge la información introducida por el usuario
        String calles = streetTextField.getText();
        String numeros = numberTextField.getText();
        String titulos = titleTextField.getText();
        String descripciones = descriptionTextPanel.getText();
        String ciudades = cityTextField.getText();
        String cps = cpTextField.getText();
        String types = (String) typeComboBox.getSelectedItem();
        double precio = 0;
        int huespedes = (int) guestSpinner.getValue();
        int habitaciones = (int) bedroomSpinner.getValue();
        int camas = (int) bedSpinner.getValue();
        int banos = (int) bathSpinner.getValue();
        String servicios = servicesTextPane.getText();
        boolean validos = true;

        // Validar título
        if (titulos.isEmpty()) {
            titleError.setVisible(true);
            validos = false;
        } else {
            titleError.setVisible(false);
        }

        // Validar fotografía
        if (foto == null || foto.isEmpty()) {
            // Solicita cargar una imagen si no hay ninguna seleccionada
            cargaImagen();
            if (foto == null || foto.isEmpty()) {
                bathError1.setVisible(true);
                validos = false;
            } else {
                bathError1.setVisible(false);
            }
        }

        // Validar descripción
        if (descripciones.isEmpty()) {
            descriptionError.setVisible(true);
            validos = false;
        } else {
            descriptionError.setVisible(false);
        }

        // Validar calle
        if (calles.isEmpty() || calles.matches(".*\\d.*")) {
            // La calle no puede estar vacía ni contener números
            JOptionPane.showMessageDialog(this, "La calle debe ser rellenada y no puede contener números.", "Error en la calle", JOptionPane.WARNING_MESSAGE);
            validos = false;
        }

        // Validar número de inmueble
        int numeroInt = 0;
        if (numeros.isEmpty()) {
            // El número del inmueble es obligatorio
            JOptionPane.showMessageDialog(this, "El número del inmueble es necesario", "Falta el número", JOptionPane.WARNING_MESSAGE);
            validos = false;
        } else {
            try {
                numeroInt = Integer.parseInt(numeros);
                if (numeroInt <= 0) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) {
                validos = false;
                JOptionPane.showMessageDialog(this, "El número ha de ser un entero mayor que 0.", "Error de número", JOptionPane.WARNING_MESSAGE);
            }
        }

        // Validar ciudad
        if (ciudades.isEmpty() || ciudades.matches(".*\\d.*")) {
            // La ciudad no puede estar vacía ni contener números
            JOptionPane.showMessageDialog(this, "La ciudad debe ser rellenada y no puede contener números.", "Error en la ciudad", JOptionPane.WARNING_MESSAGE);
            validos = false;
        }

        // Validar código postal
        int cpInt = 0;
        if (cps.isEmpty() || cps.length() != 5) {
            // El código postal debe tener exactamente 5 caracteres
            JOptionPane.showMessageDialog(this, "El código postal ha de tener 5 caracteres.", "Error del código postal", JOptionPane.WARNING_MESSAGE);
            validos = false;
        } else {
            try {
                cpInt = Integer.parseInt(cps);
            } catch (NumberFormatException e) {
                validos = false;
                JOptionPane.showMessageDialog(this, "El código postal ha de ser un número entero.", "Error del código postal", JOptionPane.WARNING_MESSAGE);
            }
        }

        // Validar precio
        try {
            String priceText = priceTextField.getText().trim();
            if (priceText.isEmpty() || !priceText.matches("\\d+(\\.\\d{1,2})?")) {
                throw new NumberFormatException("El precio ha de ser un número válido.");
            }
            precio = Double.parseDouble(priceText);
            if (precio <= 0) {
                throw new NumberFormatException("El precio ha de ser mayor que 0.");
            }
            priceError.setVisible(false);
        } catch (NumberFormatException e) {
            priceError.setVisible(true);
            validos = false;
            JOptionPane.showMessageDialog(this, "Introduzca un precio válido mayor que 0. \nRecuerde el uso del punto en decimales (ej. 180.55).", "Error del precio", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validar número de huéspedes
        if (huespedes <= 0) {
            guestError.setVisible(true);
            validos = false;
        } else {
            guestError.setVisible(false);
        }

        // Validar número de habitaciones
        if (habitaciones <= 0) {
            bedroomError.setVisible(true);
            validos = false;
        } else {
            bedroomError.setVisible(false);
        }

        // Validar número de camas
        if (camas <= 0) {
            bedError.setVisible(true);
            validos = false;
        } else {
            bedError.setVisible(false);
        }

        // Validar número de baños
        if (banos <= 0) {
            bathError.setVisible(true);
            validos = false;
        } else {
            bathError.setVisible(false);
        }

        // Validar servicios
        if (servicios.isEmpty()) {
            serviceError.setVisible(true);
            validos = false;
        } else {
            serviceError.setVisible(false);
        }

        // Si todos los datos son válidos, procede a crear el inmueble
        if (validos) {
            // Crea un objeto InfoInmueble con los datos de huéspedes, habitaciones, camas y baños
            InfoInmueble datos = new InfoInmueble(huespedes, habitaciones, camas, banos);

            // Crea un objeto Direccion con los datos de la dirección del inmueble
            Direccion direccion = new Direccion(calles, numeros, cps, ciudades);

            // Crea un objeto Inmueble con todos los datos recopilados
            Inmueble inmueble = new Inmueble(titulos, descripciones, direccion, datos, types, precio, foto, servicios, anfitrion);

            // Intenta añadir el inmueble a la base de datos
            boolean inmuebleValido = MainBNB.añadirInmueble(inmueble);
            if (inmuebleValido) {
                // Muestra un mensaje de éxito si el inmueble se ha añadido correctamente
                JOptionPane.showMessageDialog(this, "Este inmueble ha sido creado, ahora está añadido en la lista de inmuebles.", "Inmueble creado", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Muestra un mensaje de advertencia si el inmueble ya existe
                JOptionPane.showMessageDialog(this, "Este inmueble ya existe, no se admiten inmuebles repetidos.", "Inmueble ya existente", JOptionPane.WARNING_MESSAGE);
            }
        }

    }//GEN-LAST:event_createBuildingButtonActionPerformed

    private void priceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barraarriba;
    private javax.swing.JLabel bathError;
    private javax.swing.JLabel bathError1;
    private javax.swing.JLabel bathLabel;
    private javax.swing.JSpinner bathSpinner;
    private javax.swing.JLabel bedError;
    private javax.swing.JLabel bedLabel;
    private javax.swing.JSpinner bedSpinner;
    private javax.swing.JLabel bedroomError;
    private javax.swing.JLabel bedroomLabel;
    private javax.swing.JSpinner bedroomSpinner;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JLabel cpLabel;
    private javax.swing.JTextField cpTextField;
    private javax.swing.JButton createBuildingButton;
    private javax.swing.JPanel data;
    private javax.swing.JLabel descriptionError;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextPane descriptionTextPanel;
    private javax.swing.JLabel guestError;
    private javax.swing.JLabel guestLabel;
    private javax.swing.JSpinner guestSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton logo;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JButton mainscr;
    private javax.swing.JLabel numberLabel;
    private javax.swing.JTextField numberTextField;
    private javax.swing.JButton photoButton;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JLabel priceError;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JLabel serviceError;
    private javax.swing.JLabel servicesLabel;
    private javax.swing.JTextPane servicesTextPane;
    private javax.swing.JLabel streetLabel;
    private javax.swing.JTextField streetTextField;
    private javax.swing.JLabel titleError;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextPane titleTextField;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
}
